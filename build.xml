<?xml version="1.0" encoding="UTF-8"?>

<project name="clue" default="run" basedir=".">

  <description>Builds, tests, and runs the project antTest.</description>
  <!-- set global properties for this build -->
  <property name="src.dir" value="src"/>
  <property name="build.dir" value="build"/>
  <property name="lib.dir" value="lib" />
  <property name="log.dir" value="log" />
  <property name="dist.dir"  value="dist"/>
  <property name="doc.dir"  value="doc"/>
  <property name="java.dir"  value="${src.dir}/java"/>
  <property name="protobuf.dir"  value="${src.dir}/protobuf"/>
  <property name="jar" value="${dist.dir}/clue.jar"/>
  <!-- name of main class (without the .java) -->
  <property name="main-class" value="com.clue.app.Main"/>
  <property name="protobuf"  value="protoc"/>
  <property name="protobuf.include"  value="-I=${protobuf.dir}"/>
  <property name="protobuf.destination"  value="--java_out=${java.dir}"/>

  <target name="init">
    <mkdir dir="${dist.dir}/"/>
    <mkdir dir="${build.dir}"/>
  </target>

  <target name="clean" description="clean up">
    <delete dir="${build.dir}"/>
    <!-- Remove generated Proto Buff files -->
    <delete dir="${src.dir}/java/com/clue/proto" />
    <delete dir="${dist.dir}"/>
    <delete dir="${doc.dir}"/>
    <delete dir="${log.dir}"/>
  </target>

  <target name="protobuf" description="compile the protocol buffers">
    <!-- protoc -I=protobuf.include -java_out=protobuf.destination SRCFILES -->
    <apply executable="${protobuf}" relative="true" verbose="true">
      <arg value="${protobuf.include}"/>
      <arg value="${protobuf.destination}"/>
      <srcfile/> <!-- inserts SRCFILES after the destination argument-->
      <!-- replace SRCFILE with the relative path of each .proto file contained in the current working directory-->
      <fileset dir="." includes="**/*.proto"/>
      <!-- checks if the .proto file is newer than the *Proto.java file -->
      <!-- this will allow us to only run protoc on .proto files that change -->
      <!-- handledirsep="true" necessary for cross-platform builds -->
      <globmapper from="src/protobuf/*.proto" to="src/java/com/clue/proto/*.java" handledirsep="true"/>
    </apply>
  </target>

  <target name="compile" depends="init, protobuf" description="compile the source">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${java.dir}"
           destdir="${build.dir}"
           debug="true"
           debuglevel="lines,vars,source"
           includeantruntime="false">
      <classpath>
        <pathelement path="${classpath}"/>
        <pathelement path="${build.dir}"/>
        <!-- Add all .jar files inside of the lib directory to our classpath -->
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
      </classpath>
      <!-- Remove extra warnings because protobuf generated java files are noisy -->
      <!-- <compilerarg value="-Xlint"/> -->
    </javac>
  </target>

  <target name="build" depends="compile"/>

  <target name="dist" depends="compile" description="generate the distribution">
    <!-- By default, exclude all files and directories-->
    <jar jarfile="${jar}" basedir="." excludes="**/**">
      <!-- Include the entire src directory in the jar file-->
      <fileset dir="." includes="${src.dir}/**"/>
      <!-- Take all .class and.png files in build/ and put them in the jar file -->
      <fileset dir="${build.dir}" includes="**/*.class,**/*.png"/>
      <!-- Take all jars in lib/, extract them, and put all of their .class files into the new jar -->
      <zipgroupfileset dir="${lib.dir}" includes="**/*.jar"/>

      <manifest>
        <attribute name="Main-class" value="${main-class}"/>
      </manifest>
    </jar>
  </target>

  <target name="jar" depends="dist"/>
  <target name="package" depends="dist"/>

  <target name="run" depends="dist" description="run the compiled jar">
    <java jar="${jar}" fork="true">
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8000,suspend=n"/>
    </java>
  </target>

  <target name="run-client" depends="dist" description="run the compiled jar as a client">
    <java jar="${jar}" fork="true">
      <jvmarg value="-Dlogger.id=client"/>
      <jvmarg value="-Dconfig.file=./config/client.yaml"/>
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8100,suspend=n"/>
    </java>
  </target>

  <target name="run-gui" depends="dist" description="run the compiled jar as a GUI">
    <java jar="${jar}" fork="true">
      <jvmarg value="-Dlogger.id=gui"/>
      <jvmarg value="-Dconfig.file=./config/gui.yaml"/>
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8101,suspend=n"/>
    </java>
  </target>

  <target name="run-server" depends="dist" description="run the compiled jar as a server">
    <java jar="${jar}" fork="true">
      <jvmarg value="-Dlogger.id=server"/>
      <jvmarg value="-Dconfig.file=./config/server.yaml"/>
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8200,suspend=n"/>
    </java>
  </target>

  <target name="document">
    <javadoc access="public"
             destdir="${doc.dir}"
             author="true"
             version="true"
             use="true"
             windowtitle="Clue API">
      <fileset dir="${src.dir}" defaultexcludes="yes">
        <include name="**/*.java"/>
      </fileset>
      <classpath>
        <!-- Add all .jar files inside of the lib directory to our classpath -->
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
      </classpath>
    </javadoc>
  </target>

  <target name="doc" depends="document" />

</project>
